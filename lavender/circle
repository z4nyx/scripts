#!/usr/bin/env bash
echo "Cloning dependencies"
git clone https://github.com/najahiiii/priv-toolchains.git -b non-elf/gcc-10.0.0/arm --depth=1 gcc32
git clone https://github.com/najahiiii/priv-toolchains.git -b non-elf/gcc-10.0.0/arm64 --depth=1 gcc
git clone https://github.com/z4nyx/AnyKernel3.git -b lavender --depth=1 AnyKernel
echo "Done"
GCC="$(pwd)/gcc/bin/aarch64-linux-gnu-"
GCC32="$(pwd)/gcc32/bin/arm-linux-gnueabi-"
IMAGE="$(pwd)/out/arch/arm64/boot/Image.gz-dtb"
TANGGAL=$(date +"%Y%m%d-%H")
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
export ARCH=arm64
export KBUILD_BUILD_USER=z4nyx
export KBUILD_BUILD_HOST=circle
# sticker plox
function sticker() {
    curl -s -X POST "https://api.telegram.org/bot$token/sendSticker" \
        -d sticker="CAADAQADHwADvi-SJav6XQncmFHxFgQ" \
        -d chat_id="$chat_id"
}
# Send info plox channel
function sendinfo() {
    curl -s -X POST "https://api.telegram.org/bot$token/sendMessage" \
        -d chat_id="$chat_id" \
        -d "disable_web_page_preview=true" \
        -d "parse_mode=html" \
        -d text="New build available!%0ADevice : <code>Xiaomi Redmi Note 7/7S</code>%0AToolchain : <code>$(${GCC}gcc --version | head -n 1 | perl -pe 's/\(https.*?\)//gs' | sed  -e 's/  */ /g')</code>%0ABranch : <code>${BRANCH}</code>%0ACommit Point : <code>$(git log --pretty=format:'"%h : %s"' -1)</code>"
}
# Push kernel to channel
function push() {
    cd AnyKernel || exit 1
    ZIP=$(echo *.zip)
    curl -F document=@$ZIP "https://api.telegram.org/bot$token/sendDocument" \
        -F chat_id="$chat_id"
}
# Fin Error
function finerr() {
    curl -s -X POST "https://api.telegram.org/bot$token/sendMessage" \
        -d chat_id="$haikal" \
        -d "disable_web_page_preview=true" \
        -d "parse_mode=markdown" \
        -d text="Build throw an error(s)"
    exit 1
}
# Compile plox
function compile() {
    make -s -C "$(pwd)" -j"$(nproc)" O=out lavender_defconfig
    make -C "$(pwd)" O=out -j$(nproc) \
                   CROSS_COMPILE="${GCC}" \
                   CROSS_COMPILE_ARM32="${GCC32}"

    if ! [ -a "$IMAGE" ]; then
        finerr
        exit 1
    fi
    cp out/arch/arm64/boot/Image.gz-dtb AnyKernel
}
# Zipping
function zipping() {
    cd AnyKernel || exit 1
    zip -r9 LightBorn-lavender-${TANGGAL}.zip *
    cd .. #well
}
compile
zipping
sticker
sendinfo
push
